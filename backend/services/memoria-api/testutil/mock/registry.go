// Code generated by MockGen. DO NOT EDIT.
// Source: registry/registry.go
//
// Generated by this command:
//
//	mockgen -source=registry/registry.go -destination=testutil/mock/registry.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	interfaces "memoria-api/domain/interfaces"
	repository "memoria-api/domain/interfaces/repository"
	service "memoria-api/domain/service"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockRegistry) BeginTx() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginTx")
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockRegistryMockRecorder) BeginTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockRegistry)(nil).BeginTx))
}

// CloseDB mocks base method.
func (m *MockRegistry) CloseDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseDB")
}

// CloseDB indicates an expected call of CloseDB.
func (mr *MockRegistryMockRecorder) CloseDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDB", reflect.TypeOf((*MockRegistry)(nil).CloseDB))
}

// CommitTx mocks base method.
func (m *MockRegistry) CommitTx() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CommitTx")
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockRegistryMockRecorder) CommitTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockRegistry)(nil).CommitTx))
}

// NewSESMailer mocks base method.
func (m *MockRegistry) NewSESMailer() (interfaces.Mailer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSESMailer")
	ret0, _ := ret[0].(interfaces.Mailer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSESMailer indicates an expected call of NewSESMailer.
func (mr *MockRegistryMockRecorder) NewSESMailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSESMailer", reflect.TypeOf((*MockRegistry)(nil).NewSESMailer))
}

// NewUserInvitationRepository mocks base method.
func (m *MockRegistry) NewUserInvitationRepository() repository.UserInvitation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserInvitationRepository")
	ret0, _ := ret[0].(repository.UserInvitation)
	return ret0
}

// NewUserInvitationRepository indicates an expected call of NewUserInvitationRepository.
func (mr *MockRegistryMockRecorder) NewUserInvitationRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserInvitationRepository", reflect.TypeOf((*MockRegistry)(nil).NewUserInvitationRepository))
}

// NewUserInvitationService mocks base method.
func (m *MockRegistry) NewUserInvitationService() *service.UserInvitation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserInvitationService")
	ret0, _ := ret[0].(*service.UserInvitation)
	return ret0
}

// NewUserInvitationService indicates an expected call of NewUserInvitationService.
func (mr *MockRegistryMockRecorder) NewUserInvitationService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserInvitationService", reflect.TypeOf((*MockRegistry)(nil).NewUserInvitationService))
}

// NewUserRepository mocks base method.
func (m *MockRegistry) NewUserRepository() repository.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserRepository")
	ret0, _ := ret[0].(repository.User)
	return ret0
}

// NewUserRepository indicates an expected call of NewUserRepository.
func (mr *MockRegistryMockRecorder) NewUserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserRepository", reflect.TypeOf((*MockRegistry)(nil).NewUserRepository))
}

// NewUserService mocks base method.
func (m *MockRegistry) NewUserService() *service.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserService")
	ret0, _ := ret[0].(*service.User)
	return ret0
}

// NewUserService indicates an expected call of NewUserService.
func (mr *MockRegistryMockRecorder) NewUserService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserService", reflect.TypeOf((*MockRegistry)(nil).NewUserService))
}

// NewUserSpaceRepository mocks base method.
func (m *MockRegistry) NewUserSpaceRepository() repository.UserSpace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserSpaceRepository")
	ret0, _ := ret[0].(repository.UserSpace)
	return ret0
}

// NewUserSpaceRepository indicates an expected call of NewUserSpaceRepository.
func (mr *MockRegistryMockRecorder) NewUserSpaceRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserSpaceRepository", reflect.TypeOf((*MockRegistry)(nil).NewUserSpaceRepository))
}

// NewUserSpaceService mocks base method.
func (m *MockRegistry) NewUserSpaceService() *service.UserSpace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserSpaceService")
	ret0, _ := ret[0].(*service.UserSpace)
	return ret0
}

// NewUserSpaceService indicates an expected call of NewUserSpaceService.
func (mr *MockRegistryMockRecorder) NewUserSpaceService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserSpaceService", reflect.TypeOf((*MockRegistry)(nil).NewUserSpaceService))
}

// NewUserUserSpaceRelationRepository mocks base method.
func (m *MockRegistry) NewUserUserSpaceRelationRepository() repository.UserUserSpaceRelation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserUserSpaceRelationRepository")
	ret0, _ := ret[0].(repository.UserUserSpaceRelation)
	return ret0
}

// NewUserUserSpaceRelationRepository indicates an expected call of NewUserUserSpaceRelationRepository.
func (mr *MockRegistryMockRecorder) NewUserUserSpaceRelationRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserUserSpaceRelationRepository", reflect.TypeOf((*MockRegistry)(nil).NewUserUserSpaceRelationRepository))
}

// NewUserUserSpaceRelationService mocks base method.
func (m *MockRegistry) NewUserUserSpaceRelationService() *service.UserUserSpaceRelation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserUserSpaceRelationService")
	ret0, _ := ret[0].(*service.UserUserSpaceRelation)
	return ret0
}

// NewUserUserSpaceRelationService indicates an expected call of NewUserUserSpaceRelationService.
func (mr *MockRegistryMockRecorder) NewUserUserSpaceRelationService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserUserSpaceRelationService", reflect.TypeOf((*MockRegistry)(nil).NewUserUserSpaceRelationService))
}

// RollbackTx mocks base method.
func (m *MockRegistry) RollbackTx() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RollbackTx")
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockRegistryMockRecorder) RollbackTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockRegistry)(nil).RollbackTx))
}
